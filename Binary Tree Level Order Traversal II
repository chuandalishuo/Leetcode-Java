/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution1 {// bottom to top
    public void helper(TreeNode root, int level, ArrayList<ArrayList<Integer>> res){
        if(root == null) return;
        helper(root.left, level-1, res);// recursive left
        helper(root.right, level-1, res);// recursive right
        res.get(level).add(root.val); // visit: store
    }
    public int heightBT(TreeNode root){
        if(root==null) return 0;
        return Math.max(heightBT(root.left), heightBT(root.right)) + 1; 
    }
    public ArrayList<ArrayList<Integer>> levelOrderBottom(TreeNode root) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        int height = heightBT(root);
        for(int i=0; i<height;i++) {ArrayList<Integer> temp = new ArrayList<Integer>(); res.add(temp);}
        helper(root, height-1, res);
        return res;
    }
}

public class Solution2 {// top to bottom, then reverse result
    public static void treeTra(TreeNode root, int level, ArrayList<ArrayList<Integer>> result){
        if(root!=null){
            if(level>result.size()){result.add(new ArrayList<Integer>());}
            result.get(level-1).add(root.val);
            treeTra(root.left, level+1, result);
            treeTra(root.right, level+1, result);
        }
    }
    public ArrayList<ArrayList<Integer>> levelOrderBottom(TreeNode root) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        treeTra(root, 1, result);
        Collections.reverse(result);
        return result;
    }
}
