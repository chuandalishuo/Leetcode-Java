public int canCompleteCircuit(int[] gas, int[] cost) {  
    if(gas==null || gas.length==0 || cost==null || cost.length==0 || gas.length!=cost.length)  
        return -1;  
    int sum = 0;  
    int total = 0;  
    int pointer = -1;  
    for(int i=0;i<gas.length;i++)  
    {  
        int diff = gas[i]-cost[i];  
        sum += diff;  
        total += diff;  
        if(sum<0)  
        {  
            sum=0;  
            pointer=i;  
        }  
    }  
    return total>=0?pointer+1:-1;  
}
//等价解法: minsum就是最后一个负序列的终点，所以下一个就是正序列的起点
public class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int[] remain = new int[gas.length];
        for(int i=0; i<gas.length; i++){
            remain[i] = gas[i]-cost[i];
        }
        int sum=remain[0], minsum=remain[0],minid=0;
        for(int i=1; i<gas.length; i++){
            sum+=remain[i];
            if(minsum>sum){
                minsum = sum;
                minid=i;
            }
        }
        if(sum<0) return -1;
        return minid==gas.length-1? 0:minid+1;
    }
}
