public class Solution {
    public int maxrec(int[] A){
       Stack<Integer> stack = new Stack<Integer>();
       int maxarea = 0;
       for(int i=0; i<A.length; i++){
           while(!stack.empty()&&A[i]<=A[stack.peek()]){
               int height = A[stack.pop()];
               int width = stack.empty() ? i : i-stack.peek()-1;
               maxarea = Math.max(maxarea, height*width);
           }
           stack.push(i);
       }
       while(!stack.empty()){
           int height = A[stack.pop()];
           int width = (stack.empty() ? A.length : A.length-stack.peek()-1);
           maxarea = Math.max(maxarea, height*width);
       }
       return maxarea;
    }
    public int maximalRectangle(char[][] matrix) {
        int h = matrix.length; if(h==0) return 0;
        int w = matrix[0].length; int maxarea=0;
        int[] height = new int[w]; 
        for(int i=0; i<h; i++){
            for(int j=0; j<w; j++){
                height[j] = matrix[i][j]=='0' ? 0 : height[j]+1;
            }
            maxarea = Math.max(maxarea, maxrec(height));
        }
       return maxarea;
    }
}
