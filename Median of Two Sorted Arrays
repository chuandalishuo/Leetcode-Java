/*坑：1.数组偶数个元素，返回中间两个的平均值。2.确保一个长一个短。3.一个数组为空，直接返回另外一个的第k个。
4.k<=1，返回两个数组里最小的。*/
public class Solution {
    public static double findKth(int A[], int B[], int BeA, int EnA, int BeB, int EnB, int k){
        if(EnA-BeA > EnB-BeB) return findKth(B,A,BeB,EnB,BeA,EnA,k);//make sure A is the shorter one
        if(EnA-BeA < 0) return B[k-1]; //A is empty
        if(k<=1) return Math.min(A[BeA],B[BeB]);
        
        int pa = k/2>(EnA-BeA+1)?EnA:BeA+k/2-1, pb = BeB + k - pa+BeA -2;
        if(A[pa]<B[pb]) return findKth(A, B, pa+1, EnA, BeB, EnB, k-pa+BeA-1);
        else return findKth(A, B, BeA, EnA, pb+1, EnB, k-pb+BeB-1);
    }
    public double findMedianSortedArrays(int A[], int B[]) {
        int m = A.length, n = B.length;
        if((m+n)%2==0)
            return (findKth(A, B, 0, m-1, 0, n-1, (m+n)/2) + findKth(A, B, 0, m-1, 0, n-1, (m+n)/2+1))/2;
        else
            return findKth(A, B, 0, m-1, 0, n-1, (m+n)/2+1);
    }
}

//更清晰版本
public class Solution {
    public double findMedianSortedArrays(int A[], int B[]) {
      if((A.length+B.length)%2==1)  
          return helper(A,B,0,A.length-1,0,B.length-1,(A.length+B.length)/2+1);  
      else  
          return (helper(A,B,0,A.length-1,0,B.length-1,(A.length+B.length)/2)    
                 +helper(A,B,0,A.length-1,0,B.length-1,(A.length+B.length)/2+1))/2.0;
    }
    private int helper(int A[], int B[], int i, int i2, int j, int j2, int k) {  
        int m = i2-i+1;  
        int n = j2-j+1;  
        if(m>n)  
            return helper(B,A,j,j2,i,i2,k);  
        if(m==0)  
            return B[j+k-1];  
        if(k==1)  
            return Math.min(A[i],B[j]);  
        int posA = Math.min(k/2,m);  
        int posB = k-posA;  
        if(A[i+posA-1]==B[j+posB-1])  
            return A[i+posA-1];  
        else if(A[i+posA-1]<B[j+posB-1])  
            return helper(A,B,i+posA,i2,j,j+posB-1,k-posA);  
        else  
            return helper(A,B,i,i+posA-1,j+posB,j2,k-posB);  
    }  
}
