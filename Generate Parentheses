public class Solution {
    public void dfs(int l, int r, ArrayList<String> res, StringBuilder sb){
        if(l>r) return;
        if(l==0&&r==0) {res.add(sb.toString()); return;}
        if(l>0){
            dfs(l-1, r, res, sb.append("("));
            sb.delete(sb.length()-1,sb.length());
        }
        if(r>0){
            dfs(l, r-1, res, sb.append(")"));
            sb.delete(sb.length()-1,sb.length());
        }
    }
    public ArrayList<String> generateParenthesis(int n) {
        ArrayList<String> res = new ArrayList<String>();
        StringBuilder sb = new StringBuilder();
        dfs(n,n,res,sb);
        return res;
    }
}
