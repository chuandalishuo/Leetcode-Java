/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode helper(int[] inorder, int[] postorder, int instart, int inend, int poststart, int postend, HashMap<Integer, Integer> map){
        if(instart>inend||poststart>postend) return null;
        int inroot = map.get(postorder[postend]);
        int inleftlen = inroot - instart;
        TreeNode node = new TreeNode(postorder[postend]);
        node.left = helper(inorder, postorder, instart, inroot-1, poststart, poststart+inleftlen-1,map);
        node.right = helper(inorder, postorder, inroot+1, inend, poststart+inleftlen, postend-1,map);
        return node;
    }
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(inorder.length!=postorder.length||inorder.length==0) return null;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i=0; i<inorder.length; i++){
            map.put(inorder[i],i);
        }
        return helper(inorder, postorder, 0, inorder.length-1, 0, inorder.length-1, map);
    }
}
