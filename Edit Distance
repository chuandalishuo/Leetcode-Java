//动规
public class Solution {
    public int minDistance(String word1, String word2) {
        int[][] f = new int[word1.length()+1][word2.length()+1];
        f[0][0]=0;
        for(int i=1; i<=word1.length();i++){
            f[i][0] = f[i-1][0]+1;
        }
        for(int i=1; i<=word2.length();i++){
            f[0][i] = f[0][i-1]+1;
        }
        for(int i=1; i<=word2.length();i++){
            for(int j=1; j<=word1.length();j++){
                if(word1.charAt(j-1)==word2.charAt(i-1)) f[j][i] = f[j-1][i-1];
                else{
                    f[j][i] = Math.min(Math.min(f[j-1][i-1],f[j][i-1]),f[j-1][i])+1;
                }
            }
        }
        return f[word1.length()][word2.length()];
    }
}
//动规+滚动数组
public class Solution {
    public int minDistance(String word1, String word2) {
        int len1 = word1.length(), len2 = word2.length();
        String sword = len1>=len2?word2:word1;
        String lword = len2>len1?word2:word1;
        int[] pre = new int[sword.length()+1];
        for(int i=0; i<=sword.length();i++){
            pre[i] = i;
        }
        for(int i=1; i<=lword.length();i++){
            int[] cur = new int[sword.length()+1];
            cur[0]=i;
            for(int j=1; j<=sword.length();j++){
                if(sword.charAt(j-1)==lword.charAt(i-1)) cur[j] = pre[j-1];
                else{
                    cur[j] = Math.min(Math.min(pre[j-1],pre[j]),cur[j-1])+1;
                }
            }
            pre = cur;
        }
        return pre[sword.length()];
    }
}
