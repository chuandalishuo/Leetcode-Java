public class Solution {
    public ArrayList<Integer> findSubstring(String S, String[] L) {
        ArrayList<Integer> res = new ArrayList<Integer>();
        int m = L.length;
        if(m==0) return res;
        int n = L[0].length();
        if(n==0 || S.length()<m*n) return res;
        HashMap<String, Integer> map = new HashMap<String, Integer>();
        for(int i=0; i<m; i++){// store all words into map, mapped value is the count of the word
            if(map.containsKey(L[i])) map.put(L[i], map.get(L[i])+1);
            else map.put(L[i], 1);
        }
        for(int i=0; i<=S.length()-m*n; i++){
            HashMap<String, Integer> temp = new HashMap<String, Integer>(map);
            for(int j=0; j<m; j++){
                String str = S.substring(i+j*n, i+(j+1)*n); // get the word in S
                 if(temp.containsKey(str)){// if the word appear in L
                     if(temp.get(str)-1>0) temp.put(str,temp.get(str)-1);
                     else temp.remove(str);
                 }
                 else break;
            }
            if(temp.isEmpty()){res.add(i);}
            else temp.clear();
            
        }
        // 更高效的算法（O(s.length)）
        public ArrayList<Integer> findSubstring(String S, String[] L) {  
    // Note: The Solution object is instantiated only once and is reused by each test case.  
    ArrayList<Integer> res = new ArrayList<Integer>();  
    if(S==null || S.length()==0 || L==null || L.length==0)  
        return res;  
    HashMap<String,Integer> map = new HashMap<String,Integer>();  
    for(int i=0;i<L.length;i++)  
    {  
        if(map.containsKey(L[i]))  
        {  
            map.put(L[i],map.get(L[i])+1);  
        }  
        else  
        {  
            map.put(L[i],1);  
        }  
    }  
    for(int i=0;i<L[0].length();i++)  
    {  
        HashMap<String,Integer> curMap = new HashMap<String,Integer>();  
        int count = 0;  
        int left = i;  
        for(int j=i;j<=S.length()-L[0].length();j+=L[0].length())  
        {  
            String str = S.substring(j,j+L[0].length());  
              
            if(map.containsKey(str))  
            {  
                if(curMap.containsKey(str))  
                    curMap.put(str,curMap.get(str)+1);  
                else  
                    curMap.put(str,1);  
                if(curMap.get(str)<=map.get(str))  
                    count++;  
                else  
                {  
                    while(curMap.get(str)>map.get(str))  
                    {  
                        String temp = S.substring(left,left+L[0].length());  
                        if(curMap.containsKey(temp))  
                        {  
                            curMap.put(temp,curMap.get(temp)-1);  
                            if(curMap.get(temp)<map.get(temp))  
                                count--;  
                        }  
                        left += L[0].length();  
                    }  
                }  
                if(count == L.length)  
                {  
                    res.add(left);  
                    //if(left<)  
                    String temp = S.substring(left,left+L[0].length());  
                    if(curMap.containsKey(temp))  
                        curMap.put(temp,curMap.get(temp)-1);  
                    count--;  
                    left += L[0].length();  
                }  
            }  
            else  
            {  
                curMap.clear();  
                count = 0;  
                left = j+L[0].length();  
            }  
        }  
    }  
    return res;  
}  
        return res;
    }
}
