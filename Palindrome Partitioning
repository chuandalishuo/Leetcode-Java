//time O(n^3)
public class Solution {
    public static boolean isPalindrome(String s, int b, int e){
        if(b>e) return false;
        while(b<=e){
            if(s.charAt(b)!=s.charAt(e)) return false;
            b++;e--;
        }
        return true;
    }
    public static void find(String s, int start, ArrayList<ArrayList<String>> result, ArrayList<String> path){
        if(start==s.length()){
            result.add(new ArrayList<String>(path));
            return;
        }
        for(int i=start; i<s.length();i++){
            if(isPalindrome(s,start,i)){
                path.add(s.substring(start,i+1));
                find(s,i+1,result,path);
                path.remove(path.size()-1);
            }   
        }
    }
    public ArrayList<ArrayList<String>> partition(String s) {
        ArrayList<ArrayList<String>> result = new ArrayList<ArrayList<String>>();
        if(s.length()==0||s==null) {return result;}
        ArrayList<String> path = new ArrayList<String>();
        find(s,0,result,path);
        //select paths that from 0 to s.length()-1
        return result;
    }
}
// time O(n^2), space O(^2)
public ArrayList<ArrayList<String>> partition(String s) {  
    ArrayList<ArrayList<String>> res = new ArrayList<ArrayList<String>>();  
    if(s==null || s.length()==0)  
        return res;  
    helper(s, getDict(s),0,new ArrayList<String>(), res);  
    return res;  
}  
private void helper(String s, boolean[][] dict, int start, ArrayList<String> item, ArrayList<ArrayList<String>> res)  
{  
    if(start==s.length())  
    {  
        res.add(new ArrayList<String>(item));  
        return;  
    }  
    for(int i=start;i<s.length();i++)  
    {  
        if(dict[start][i])  
        {  
            item.add(s.substring(start,i+1));  
            helper(s,dict,i+1,item,res);  
            item.remove(item.size()-1);  
        }  
    }  
}  
private boolean[][] getDict(String s)  
{  
    boolean[][] dict = new boolean[s.length()][s.length()];  
    for(int i=s.length()-1;i>=0;i--)  
    {  
        for(int j=i;j<s.length();j++)  
        {  
            if(s.charAt(i)==s.charAt(j) && ((j-i<2)||dict[i+1][j-1]))  
            {  
                dict[i][j] = true;  
            }  
        }  
    }  
    return dict;  
} 
