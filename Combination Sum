public class Solution {
    public void dfs(int[] candidates, int start, int target, ArrayList<ArrayList<Integer>> res, ArrayList<Integer> path){
        if(target<0) return;
        if(target==0 && !res.contains(path)){
            res.add(new ArrayList<Integer>(path));
            return;
        }
        for(int i=start; i<candidates.length; i++){// 找不重复的组合要不断向前，不能再回去找
            if(candidates[i]<=target){//剪枝
                path.add(candidates[i]);
                dfs(candidates, i, target-candidates[i], res, path);//因为元素可重复，所以下一论可以还i开始
                path.remove(path.size()-1);
            }
        }
    }
    public ArrayList<ArrayList<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(candidates.length==0) return res;
        ArrayList<Integer> path = new ArrayList<Integer>();
        dfs(candidates, 0, target, res, path);
        return res;
    }
}
