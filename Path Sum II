/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void dfs(TreeNode root, int sum, ArrayList<ArrayList<Integer>> res, ArrayList<Integer> path){
        if(root==null) return;
        if(root.left==null && root.right==null && sum == 0){res.add(new ArrayList<Integer>(path)); return;}
        if(root.left!=null){
            path.add(root.left.val);
            dfs(root.left, sum-root.left.val, res, path);
            path.remove(path.size()-1);
        }
        if(root.right!=null){
            path.add(root.right.val);
            dfs(root.right, sum-root.right.val, res, path);
            path.remove(path.size()-1);
        }
    }
    public ArrayList<ArrayList<Integer>> pathSum(TreeNode root, int sum) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(root==null) return res;
        ArrayList<Integer> path = new ArrayList<Integer>();
        path.add(root.val);
        dfs(root, sum-root.val, res, path);
        return res;
    }
}
